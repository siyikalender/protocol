// Example compile statement
// g++ -Wall -g -I../../../haluj/include -I../../../bit/include -I../../include  -I../../../include/cpp -DDEBUG -std=c++17 -o ipstack main.cpp ../../src/protocol/ipv4/stack.cpp

#include <iostream>
#include <cstring>

#include "protocol/ipv4/stack.hpp"

using namespace protocol;

struct packet
{
  std::size_t   size;
  const char    *data;
};

packet g_packets[] =
{
  { // ARP
    60,
    "\xff\xff\xff\xff\xff\xff\xfe\xed\x0b\xad\xbe\xef\x08\x06\x00\x01" \
    "\x08\x00\x06\x04\x00\x01\xc4\x01\x32\x58\x00\x00\x0a\x00\x00\x01" \
    "\xc4\x02\x32\x6b\x00\x00\x0a\x00\x00\x02\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
  },
  { // ICMP
    74,
    "\xde\xad\xbe\xef\xfe\xed\xfe\xed\x0b\xad\xbe\xef\x08\x00\x45\x00" \
    "\x00\x3c\xc6\x3e\x00\x00\x80\x01\xf2\xd7\x0a\x00\x00\x01\x0a\x00" \
    "\x00\x02\x08\x00\x42\x5c\x02\x00\x09\x00\x61\x62\x63\x64\x65\x66" \
    "\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76" \
    "\x77\x61\x62\x63\x64\x65\x66\x67\x68\x69"
  },
  { // UDP 8000 -> 8000
    418,
    "\xde\xad\xbe\xef\xfe\xed\xfe\xed\x0b\xad\xbe\xef\x08\x00\x45\x00" \
    "\x01\x94\x4f\x92\x00\x00\x80\x11\x77\xcc\x0a\x00\x00\x01\x0a\x00" \
    "\x00\x02\x1f\x40\x1f\x40\x01\x80\x72\x0e\x02\x01\x06\x01\x77\x71" \
    "\xcf\x85\x00\x0a\x00\x00\x00\x00\x00\x00\x0a\x0a\x08\xeb\xac\x16" \
    "\xb2\xea\x0a\x0a\x08\xf0\x00\x0e\x86\x11\xc0\x75\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x63\x82\x53\x63\x35\x01\x02\x01\x04\xff" \
    "\xff\xff\x00\x36\x04\xac\x16\xb2\xea\x33\x04\x00\x00\xa8\xc0\x03" \
    "\x04\x0a\x0a\x08\xfe\x06\x08\x8f\xd1\x04\x01\x8f\xd1\x05\x01\x42" \
    "\x0e\x31\x37\x32\x2e\x32\x32\x2e\x31\x37\x38\x2e\x32\x33\x34\x78" \
    "\x05\x01\xac\x16\xb2\xea\x3d\x10\x00\x6e\x61\x74\x68\x61\x6e\x31" \
    "\x63\x6c\x69\x65\x6e\x74\x69\x64\x5a\x1f\x01\x01\x00\xc8\x78\xc4" \
    "\x52\x56\x40\x20\x81\x31\x32\x33\x34\x8f\xe0\xcc\xe2\xee\x85\x96" \
    "\xab\xb2\x58\x17\xc4\x80\xb2\xfd\x30\x52\x16\x01\x14\x20\x50\x4f" \
    "\x4e\x20\x31\x2f\x31\x2f\x30\x37\x2f\x30\x31\x3a\x31\x2e\x30\x2e" \
    "\x31\xff"
  },
  { // UDP 8000 -> 8001
    418,
    "\xde\xad\xbe\xef\xfe\xed\xfe\xed\x0b\xad\xbe\xef\x08\x00\x45\x00" \
    "\x01\x94\x4f\x92\x00\x00\x80\x11\x77\xcc\x0a\x00\x00\x01\x0a\x00" \
    "\x00\x02\x1f\x40\x1f\x41\x01\x80\x72\x0e\x02\x01\x06\x01\x77\x71" \
    "\xcf\x85\x00\x0a\x00\x00\x00\x00\x00\x00\x0a\x0a\x08\xeb\xac\x16" \
    "\xb2\xea\x0a\x0a\x08\xf0\x00\x0e\x86\x11\xc0\x75\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00" \
    "\x00\x00\x00\x00\x00\x00\x63\x82\x53\x63\x35\x01\x02\x01\x04\xff" \
    "\xff\xff\x00\x36\x04\xac\x16\xb2\xea\x33\x04\x00\x00\xa8\xc0\x03" \
    "\x04\x0a\x0a\x08\xfe\x06\x08\x8f\xd1\x04\x01\x8f\xd1\x05\x01\x42" \
    "\x0e\x31\x37\x32\x2e\x32\x32\x2e\x31\x37\x38\x2e\x32\x33\x34\x78" \
    "\x05\x01\xac\x16\xb2\xea\x3d\x10\x00\x6e\x61\x74\x68\x61\x6e\x31" \
    "\x63\x6c\x69\x65\x6e\x74\x69\x64\x5a\x1f\x01\x01\x00\xc8\x78\xc4" \
    "\x52\x56\x40\x20\x81\x31\x32\x33\x34\x8f\xe0\xcc\xe2\xee\x85\x96" \
    "\xab\xb2\x58\x17\xc4\x80\xb2\xfd\x30\x52\x16\x01\x14\x20\x50\x4f" \
    "\x4e\x20\x31\x2f\x31\x2f\x30\x37\x2f\x30\x31\x3a\x31\x2e\x30\x2e" \
    "\x31\xff"
  },
  // TCP
  {
    66,
    "\xde\xad\xbe\xef\xfe\xed\xfe\xed\x0b\xad\xbe\xef\x08\x00\x45\x00" \
    "\x00\x34\xa8\xd0\x40\x00\x40\x06\x9d\x72\x0a\x00\x00\x01\x0a\x00" \
    "\x00\x02\xe5\xc0\x00\x50\xe5\x94\x3d\xab\xa3\xc4\x80\xa0\x80\x10" \
    "\x00\x2e\x93\x41\x00\x00\x01\x01\x08\x0a\x00\x17\x95\x67\x8d\x9d" \
    "\x9d\xfa"
  },
  {
    526,
    "\xde\xad\xbe\xef\xfe\xed\xfe\xed\x0b\xad\xbe\xef\x08\x00\x45\x00" \
    "\x02\x00\xa8\xd1\x40\x00\x40\x06\x9b\xa5\x0a\x00\x00\x01\x0a\x00" \
    "\x00\x02\xe5\xc0\x00\x50\xe5\x94\x3d\xab\xa3\xc4\x80\xa0\x80\x18" \
    "\x00\x2e\xf6\x73\x00\x00\x01\x01\x08\x0a\x00\x17\x95\x67\x8d\x9d" \
    "\x9d\xfa\x47\x45\x54\x20\x2f\x73\x65\x72\x76\x69\x63\x65\x2f\x67" \
    "\x72\x65\x6d\x6c\x69\x6e\x2f\x6a\x73\x2f\x66\x69\x6c\x65\x73\x2f" \
    "\x66\x61\x63\x65\x62\x6f\x6f\x6b\x6c\x69\x6b\x65\x2c\x73\x6c\x69" \
    "\x64\x65\x73\x68\x6f\x77\x2c\x69\x74\x65\x6d\x53\x6c\x69\x64\x65" \
    "\x72\x2c\x73\x63\x68\x65\x64\x75\x6c\x65\x2c\x74\x65\x78\x74\x6d" \
    "\x65\x73\x73\x61\x67\x65\x2c\x6d\x6f\x73\x61\x69\x63\x2c\x6d\x6f" \
    "\x73\x61\x69\x63\x53\x6c\x69\x64\x65\x72\x2e\x6a\x73\x3f\x63\x62" \
    "\x3d\x76\x33\x2e\x34\x32\x34\x34\x20\x48\x54\x54\x50\x2f\x31\x2e" \
    "\x31\x0d\x0a\x48\x6f\x73\x74\x3a\x20\x61\x2e\x61\x62\x63\x2e\x63" \
    "\x6f\x6d\x0d\x0a\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20" \
    "\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x58\x31\x31" \
    "\x3b\x20\x55\x3b\x20\x4c\x69\x6e\x75\x78\x20\x78\x38\x36\x5f\x36" \
    "\x34\x3b\x20\x65\x6e\x2d\x55\x53\x3b\x20\x72\x76\x3a\x31\x2e\x39" \
    "\x2e\x32\x2e\x33\x29\x20\x47\x65\x63\x6b\x6f\x2f\x32\x30\x31\x30" \
    "\x30\x34\x32\x33\x20\x55\x62\x75\x6e\x74\x75\x2f\x31\x30\x2e\x30" \
    "\x34\x20\x28\x6c\x75\x63\x69\x64\x29\x20\x46\x69\x72\x65\x66\x6f" \
    "\x78\x2f\x33\x2e\x36\x2e\x33\x0d\x0a\x41\x63\x63\x65\x70\x74\x3a" \
    "\x20\x2a\x2f\x2a\x0d\x0a\x41\x63\x63\x65\x70\x74\x2d\x4c\x61\x6e" \
    "\x67\x75\x61\x67\x65\x3a\x20\x65\x6e\x2d\x75\x73\x2c\x65\x6e\x3b" \
    "\x71\x3d\x30\x2e\x35\x0d\x0a\x41\x63\x63\x65\x70\x74\x2d\x45\x6e" \
    "\x63\x6f\x64\x69\x6e\x67\x3a\x20\x67\x7a\x69\x70\x2c\x64\x65\x66" \
    "\x6c\x61\x74\x65\x0d\x0a\x41\x63\x63\x65\x70\x74\x2d\x43\x68\x61" \
    "\x72\x73\x65\x74\x3a\x20\x49\x53\x4f\x2d\x38\x38\x35\x39\x2d\x31" \
    "\x2c\x75\x74\x66\x2d\x38\x3b\x71\x3d\x30\x2e\x37\x2c\x2a\x3b\x71" \
    "\x3d\x30\x2e\x37\x0d\x0a\x4b\x65\x65\x70\x2d\x41\x6c\x69\x76\x65" \
    "\x3a\x20\x31\x31\x35\x0d\x0a\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f" \
    "\x6e\x3a\x20\x6b\x65\x65\x70\x2d\x61\x6c\x69\x76\x65\x0d\x0a\x52" \
    "\x65\x66\x65\x72\x65\x72\x3a\x20\x68\x74\x74\x70\x3a\x2f\x2f\x61" \
    "\x62\x63\x2e\x67\x6f\x2e\x63\x6f\x6d\x2f\x0d\x0a\x0d\x0a"
  },
  {
    66,
    "\xde\xad\xbe\xef\xfe\xed\xfe\xed\x0b\xad\xbe\xef\x08\x00\x45\x00" \
    "\x00\x34\xa8\xd2\x40\x00\x40\x06\x9d\x70\xc0\xa8\x01\x03\x3f\x74" \
    "\xf3\x61\xe5\xc0\x00\x50\xe5\x94\x3f\x77\xa3\xc4\x86\x48\x80\x10" \
    "\x00\x45\x8b\x9d\x00\x00\x01\x01\x08\x0a\x00\x17\x95\x69\x8d\x9d" \
    "\x9e\x11"
  }
};

void step(std::size_t packet_index)
{
  protocol::ipv4::step
  (
    // Receive Frame Available
    []() -> bool 
    {
      return true;
    },
    // Read
    [packet_index](auto &b, const std::size_t max_size) -> std::size_t 
    {
      std::size_t result = 0;
      if (g_packets[packet_index].size <= max_size)
      {
        result = g_packets[packet_index].size;
        std::memcpy(&b[0], g_packets[packet_index].data, result);
        std::cout << "Read :" << result << " byte(s)\n";
      }
      return result;
    },
    // Write
    [packet_index](auto &b, const std::size_t size) -> std::size_t 
    {
      std::cout << "Write :" << size << " byte(s)\n";
      return size;
    }
  );
}

void test_ip()
{
  ipv4::initialize();
  
  if
  (
    ipv4::set
    (
      0,
      ethernet::address{0xdc, 0x0e, 0xa1, 0x1c, 0x8e, 0x19},
      ipv4::address{10, 0, 0, 2}
    )
  )
  {
    auto &in = protocol::ipv4::g_interfaces[0];
    
    std::cout << "Interface:" << 0 << "\n";
    std::cout << "HW ADDR:" << in.hw_addr << "\n";
    std::cout << "IP ADDR:" << in.ip_addr << "\n";
  }

  uint8_t   paket[2048];
  
  auto &intf = protocol::ipv4::g_interfaces[0];
  std::cout << "============= ARP\n";
  
  step(0);

  // assert

  std::cout << "=============  ICMP\n";

  step(1);

  // assert

  // UDP

  std::cout << "=============  UDP Receive: 8000\n";

  auto ed = ipv4::udp::bind(0, 8000);
  
  step(2);

  // assert

  std::cout << "=============  UDP Receive: 8001 before bind\n";

  step(3);

  // assert

  auto ed2 = ipv4::udp::bind(0, 8001);

  std::cout << "=============  UDP Receive: 8001 after bind\n";

  step(3);

  // assert

  // UDP Send
  
  std::cout << "=============  UDP Send\n";

  uint8_t   data[16]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
  
  ipv4::udp::send
  (
    ed, 
    data, sizeof(data), 
    ipv4::endpoint
    {
      ipv4::address{10,0,0,1}, 
      8001 
    }
  );

  step(3);
}

int main()
{
  test_ip();
  
  return 0;  
}



